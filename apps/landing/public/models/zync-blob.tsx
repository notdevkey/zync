/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { Float, useGLTF } from '@react-three/drei';
import { Color, Depth, Fresnel, LayerMaterial, Noise } from 'lamina/vanilla';
import { useState } from 'react';
import * as THREE from 'three';
import { GLTF } from 'three-stdlib';

const colorA = new THREE.Color('#9f1cad').convertSRGBToLinear();
const colorB = new THREE.Color('#17416d').convertSRGBToLinear();
const fresnel = new THREE.Color('#E7B473').convertSRGBToLinear();
const material = new LayerMaterial({
  layers: [
    new Color({ color: colorA }),
    new Depth({
      colorA: colorA,
      colorB: colorB,
      alpha: 1,
      mode: 'normal',
      near: 0,
      far: 5,
      origin: [1, 1, 1],
    }),
    new Depth({
      colorA: 'blue',
      colorB: colorB,
      alpha: 0.5,
      mode: 'add',
      near: 3,
      far: 2,
      origin: [1, 1, 1],
    }),
    new Fresnel({
      mode: 'add',
      color: fresnel,
      intensity: 0.3,
      power: 2.5,
      bias: 0.0,
    }),
    new Noise({
      mapping: 'local',
      type: 'simplex',
      scale: 1000,
      colorA: '#ffaf40',
      colorB: 'black',
      mode: 'overlay',
    }),
  ],
});

type GLTFResult = GLTF & {
  nodes: {
    Logo: THREE.Mesh;
  };
};

export function ZyncBlob(props: JSX.IntrinsicElements['group']) {
  const { nodes } = useGLTF('/models/zync-blob.gltf') as GLTFResult;
  const [speed] = useState(() => 0.1 + Math.random() / 10);

  return (
    <group {...props} dispose={null}>
      <Float
        speed={speed}
        rotationIntensity={50}
        dispose={null}
        scale={4}
        position={[8, 0, 0]}
      >
        <mesh geometry={nodes.Logo.geometry} material={material} />
      </Float>
    </group>
  );
}

useGLTF.preload('/models/zync-blob.gltf');
